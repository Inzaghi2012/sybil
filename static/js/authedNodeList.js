// Generated by CoffeeScript 1.6.3
(function() {
  var AuthedNodeList, AuthedNodeListItem,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  AuthedNodeList = (function(_super) {
    __extends(AuthedNodeList, _super);

    function AuthedNodeList() {
      AuthedNodeList.__super__.constructor.call(this, window.leafTemplates["authed-node-list"]);
      this.isShown = true;
      this.hide();
    }

    AuthedNodeList.prototype.show = function() {
      if (this.isShown) {
        return;
      }
      this.isShown = true;
      return this.node$.show();
    };

    AuthedNodeList.prototype.hide = function() {
      if (!this.isShown) {
        return;
      }
      this.isShown = false;
      return this.node$.hide();
    };

    AuthedNodeList.prototype.toggle = function() {
      console.error(this.isShown);
      if (this.isShown) {
        return this.hide();
      } else {
        return this.show();
      }
    };

    AuthedNodeList.prototype.update = function(done) {
      var call,
        _this = this;
      call = window.API.authedNodes();
      return call.success(function(data) {
        var item, li, _i, _len, _ref;
        _this.UI.list$.empty();
        _ref = data.data;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          item = _ref[_i];
          li = new AuthedNodeListItem();
          li.init(item);
          li.appendTo(_this.UI.list);
        }
        if (typeof done === "function") {
          return done();
        }
      });
    };

    return AuthedNodeList;

  })(Leaf.Widget);

  window.AuthedNodeList = AuthedNodeList;

  AuthedNodeListItem = (function(_super) {
    __extends(AuthedNodeListItem, _super);

    function AuthedNodeListItem() {
      AuthedNodeListItem.__super__.constructor.call(this, window.leafTemplates["authed-node-list-item"]);
    }

    AuthedNodeListItem.prototype.init = function(data) {
      this.data = data;
      return this.UI.name$.text(data.pubkey.substring(100, 130));
    };

    AuthedNodeListItem.prototype.onClickNode = function() {
      var call, message;
      message = window.prompt("say something");
      call = API.sendMessage(this.data.guid.toString(), message);
      return call.success(function(data) {
        return alert("sent!");
      });
    };

    return AuthedNodeListItem;

  })(Leaf.Widget);

}).call(this);
