// Generated by CoffeeScript 1.6.2
(function() {
  var RssList,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  RssList = (function(_super) {
    var RssListItem;

    __extends(RssList, _super);

    function RssList() {
      RssList.__super__.constructor.call(this, sybil.templates["rss-list"]);
      this.items = [];
    }

    RssList.prototype.ListItem = RssListItem = (function(_super1) {
      __extends(RssListItem, _super1);

      function RssListItem(data, parent) {
        RssListItem.__super__.constructor.call(this, sybil.templates["rss-list-item"]);
        this.parent = parent;
        this.init(data);
        this.appendTo(this.parent.UI.listContainer);
      }

      RssListItem.prototype.init = function(data) {
        this.data = data;
        this.UI.name$.text(data.title || "anonymous");
        return this.UI.count$.text(data.unreadCount || 0);
      };

      RssListItem.prototype.remove = function() {
        var _this = this;

        RssListItem.__super__.remove.call(this);
        return this.parent.items = this.parent.item.filter(function(item) {
          return item !== _this;
        });
      };

      RssListItem.prototype.onClickNode = function() {
        sybil.router.goto("/rss/" + (this.data.id.escapeBase64()));
        return this.focus();
      };

      RssListItem.prototype.focus = function() {
        var item, _i, _len, _ref;

        _ref = this.parent.items;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          item = _ref[_i];
          item.unfocus();
        }
        return this.node$.addClass("focus");
      };

      RssListItem.prototype.unfocus = function() {
        return this.node$.removeClass("focus");
      };

      return RssListItem;

    })(Leaf.Widget);

    RssList.prototype.addRss = function(data) {
      return this.items.push(new RssListItem(data, this));
    };

    RssList.prototype.getRssById = function(id) {
      var item, _i, _len, _ref;

      _ref = this.items;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        item = _ref[_i];
        if (item.data.id === id) {
          return item.data;
        }
      }
      return null;
    };

    RssList.prototype.sync = function() {
      var _this = this;

      return API.rss().success(function(rsses) {
        var item, _i, _len;

        for (_i = 0, _len = rsses.length; _i < _len; _i++) {
          item = rsses[_i];
          _this.addRss(item);
        }
        if (!sybil.feedList.currentRss && _this.items[0]) {
          return sybil.router.goto("/rss/" + (_this.items[0].data.id.escapeBase64()));
        }
      }).fail(function(err) {
        console.error(err);
        return console.error("fail to get rss list");
      });
    };

    return RssList;

  })(Leaf.Widget);

  window.RssList = RssList;

}).call(this);
