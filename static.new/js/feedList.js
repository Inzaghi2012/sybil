// Generated by CoffeeScript 1.6.2
(function() {
  var FeedList,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  FeedList = (function(_super) {
    var FeedListItem;

    __extends(FeedList, _super);

    function FeedList() {
      var _this = this;

      FeedList.__super__.constructor.call(this, sybil.templates["feed-list"]);
      this.type = "";
      this.count = 20;
      this.items = [];
      this.node$.scroll(function() {
        return _this.onScroll();
      });
    }

    FeedList.prototype.goto = function(id) {
      var rss;

      rss = sybil.rssList.getRssById(id);
      this.clear();
      this.UI.title$.text(rss.title);
      this.currentRss = rss;
      this.undrain();
      return this.more();
    };

    FeedList.prototype.clear = function() {
      this.items.length = 0;
      return this.UI.listContainer$.empty();
    };

    FeedList.prototype.ListItem = FeedListItem = (function(_super1) {
      __extends(FeedListItem, _super1);

      function FeedListItem(data) {
        FeedListItem.__super__.constructor.call(this, sybil.templates["feed-list-item"]);
        this.init(data);
      }

      FeedListItem.prototype.init = function(data) {
        this.UI.title$.text(data.title);
        this.UI.content$.html(data.description || "");
        this.UI.date$.text(moment(data.date).format("L"));
        return this.UI.content$.find("img").each(function() {
          if (this.getAttribute("src").indexOf("http") !== 0) {
            console.log("resolve");
            this.setAttribute("src", sybil.common.resolve(data.source, this.getAttribute("src")));
            return console.log("resolved");
          }
        });
      };

      return FeedListItem;

    })(Leaf.Widget);

    FeedList.prototype.appendFeed = function(data) {
      var _this = this;

      return setTimeout((function() {
        var feed;

        feed = new FeedListItem(data);
        feed.appendTo(_this.UI.listContainer);
        return _this.items.push(feed);
      }), 0);
    };

    FeedList.prototype.onScroll = function() {};

    FeedList.prototype.more = function() {
      var _this = this;

      if (this.isDrain) {
        return;
      }
      if (!this.currentRss) {
        return;
      }
      return API.feed(this.currentRss.source, this.count, this.items.length, this.type).success(function(data) {
        var item, _i, _len, _ref, _results;

        if (data.drain) {
          _this.drain();
        }
        _ref = data.feeds;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          item = _ref[_i];
          item.rss = _this.currentRss;
          _results.push(_this.appendFeed(item));
        }
        return _results;
      }).fail(function(err) {
        console.error(err);
        return console.error("fail to load feeds", this.currentRss.source);
      });
    };

    FeedList.prototype.feedInView = function(feed) {};

    FeedList.prototype.drain = function() {
      this.isDrain = true;
      return console.log("ddrain");
    };

    FeedList.prototype.undrain = function() {
      this.isDrain = false;
      return console.log("undrain");
    };

    return FeedList;

  })(Leaf.Widget);

  window.FeedList = FeedList;

}).call(this);
