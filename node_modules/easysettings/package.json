{
  "author": {
    "name": "NStal"
  },
  "name": "easysettings",
  "description": "simple module to manage setting file/storage file for simple program ",
  "version": "0.0.3",
  "repository": {
    "type": "git",
    "url": "https://github.com/NStal/node-easysettings"
  },
  "keywords": [
    "settings",
    "config",
    "util"
  ],
  "engines": {
    "node": "*"
  },
  "directories": {
    "lib": "./lib",
    "test": "./test"
  },
  "main": "./lib/easysettings.js",
  "readme": "node-easysettings\n=================\n\nsimple module to manage setting file/storage file for simple program \n# install\nnpm install easysettings\n# example\nSuppose it's test.js\n```javascript\nvar EasySettings = require(\"../lib/easysettings.js\").EasySettings;\nvar es = new EasySettings();\n//default config save path is ./filename.conf.json\n//filename is obtained from process.arvs[1] without extname\n//in this case which is \"test\"\n//or you can just set it\nvar es = new EasySettings(\"/etc/myconfig.json\");\n\n//default is useful when your script running at the first time\nes.setDefalt({name:\"settings\"});\n//if first-time running,default settings will be used \n//if not set,{} will be used\nvar settings = es.load();\nconsole.log(settings);\n//return value of EasySettings.load is the reference of the settings json object from easy settings\n//which means you can directly modify it and save the EasySettings like below\nsettings.conf = \"conf\";\nes.save();\n//load again will just replace the reference\n//so you should get it again\nsettings = es.load();\nconsole.log(settings);\n//print {name:\"settings\",conf:\"conf\"}\n```",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/NStal/node-easysettings/issues"
  },
  "_id": "easysettings@0.0.3",
  "_from": "easysettings@"
}
