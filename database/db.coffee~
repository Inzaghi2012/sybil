mongodb = require "mongodb"
EventEmitter = (require "events").EventEmitter
async = require "async"
ObjectID = (require "mongodb").ObjectID 
config = (require "../config/databaseConfig.coffee")
dbServer = mongodb.Server config.host,config.port,config.option
collectionNames = ["rss","feed","like","share"]
dbConnector = new mongodb.Db(config.name,dbServer,{safe:false})
exports.DatabaseReady = false
Collections = {}
exports.Collections = Collections
Database = null
_eventEmitter = new EventEmitter()
dbConnector.open (err,db)->
    if err or not db
        console.error "fail to connect to mongodb"
        console.error err
        process.exit(1)
    dbConnector.db = db
    Database = null
    async.map collectionNames,((collectionName,callback)->
        dbConnector.db.collection(collectionName,(err,col)->
            if err
                callback err
            else
                callback null,col
                
            )
        return true),
        (err,results)->
            if err
                console.error "fail to prefetch Collections"
                process.exit(1)
                return
            for name,index in collectionNames
                Collections[name] = results[index]
            exports.DatabaseReady = true
            _eventEmitter.emit "ready"
exports.setFeedRead = (id,callback)->
    Collections.feed.findAndModify {_id:id,read:false},{$set:{read:true}},{safe:true},(err,obj)->
        # change the total read count
        if obj
            Collections.rss.update {_id:obj.source},{$inc:{unread:1}}
        if callback
            callback()
exports.setFeedUnread = (id,callback)->
    Collections.feed.findAndModify {_id:id,read:true},{$set:{read:false}},{safe:true},(err,obj)->
        # change the total read count
        if obj
            Collections.rss.update {_id:obj.source},{$inc:{unread:-1}}
        
exports.insertFeeds = (feeds,callback)->
    if not feeds and callback
        callback null
        return
    if not (feeds instanceof Array) and callback
        callback new Error "insert feeds need array"
        return
    # mongodb is just a temperory choice
    # thus not that much error handleing
    for feed in feeds
        feed._id = feed.source+feed.guid
        feed.read = false
        Collections.feed.insert feed,{safe:true},(err)->
            if err and err.code is 11000
                # duplicated is tolerented
                return
            if err
                console.error "db error",err
                return
            # tolerence if _id not exists
            # so dont check it
            Collections.rss.update {_id:feed.source},{$inc:{unreadCount:1}}
    if callback 
        callback null
exports.ready = (callback)->
    _eventEmitter.on "ready",callback
    
exports.addRss = (rss,callback)->
    Collections.rss.insert {_id:rss.url,url:rss.url,info:rss.info},{safe:true},(err,data)->
        if err
            if err.code is 11000
                cbError = new Error "duplicate rss"
                cbError.name = "DuplicatedError"
                callback cbError
                return
            else
                callback err
                return
        callback null
exports.removeRss = (url,callback)->
    Collections.rss.remove {_id:url},{safe:true},(err)->
        if not callback
            return
        if err
            callback err
            return
        callback null
exports.getAllRsses = (callback)->
    cursor = Collections.rss.find()
    cursor.toArray = (err,arr)->
        if err
            callback err
            return
        callback null,arr
exports.close = ()->
    dbConnector.close()








